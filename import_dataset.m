%% Import data from text file.
% Script for importing data from the following text file:
%
%    dataset.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/12/24 14:35:50

%% Initialize variables.
filename = 'dataset.txt';
delimiter = ',';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
dataset = table;
dataset.VarName1 = cell2mat(raw(:, 1));
dataset.VarName2 = cell2mat(raw(:, 2));
dataset.VarName3 = cell2mat(raw(:, 3));
dataset.VarName4 = cell2mat(raw(:, 4));
dataset.VarName5 = cell2mat(raw(:, 5));
dataset.VarName6 = cell2mat(raw(:, 6));
dataset.VarName7 = cell2mat(raw(:, 7));
dataset.VarName8 = cell2mat(raw(:, 8));
dataset.VarName9 = cell2mat(raw(:, 9));
dataset.VarName10 = cell2mat(raw(:, 10));
dataset.VarName11 = cell2mat(raw(:, 11));
dataset.VarName12 = cell2mat(raw(:, 12));
dataset.VarName13 = cell2mat(raw(:, 13));
dataset.VarName14 = cell2mat(raw(:, 14));
dataset.VarName15 = cell2mat(raw(:, 15));
dataset.VarName16 = cell2mat(raw(:, 16));
dataset.VarName17 = cell2mat(raw(:, 17));
dataset.VarName18 = cell2mat(raw(:, 18));
dataset.VarName19 = cell2mat(raw(:, 19));
dataset.VarName20 = cell2mat(raw(:, 20));
dataset.VarName21 = cell2mat(raw(:, 21));
dataset.VarName22 = cell2mat(raw(:, 22));
dataset.VarName23 = cell2mat(raw(:, 23));
dataset.VarName24 = cell2mat(raw(:, 24));
dataset.VarName25 = cell2mat(raw(:, 25));
dataset.VarName26 = cell2mat(raw(:, 26));
dataset.VarName27 = cell2mat(raw(:, 27));
dataset.VarName28 = cell2mat(raw(:, 28));
dataset.VarName29 = cell2mat(raw(:, 29));
dataset.VarName30 = cell2mat(raw(:, 30));
dataset.VarName31 = cell2mat(raw(:, 31));
dataset.VarName32 = cell2mat(raw(:, 32));
dataset.VarName33 = cell2mat(raw(:, 33));
dataset.VarName34 = cell2mat(raw(:, 34));
dataset.VarName35 = cell2mat(raw(:, 35));
dataset.VarName36 = cell2mat(raw(:, 36));
dataset.VarName37 = cell2mat(raw(:, 37));
dataset.VarName38 = cell2mat(raw(:, 38));
dataset.VarName39 = cell2mat(raw(:, 39));
dataset.VarName40 = cell2mat(raw(:, 40));
dataset.VarName41 = cell2mat(raw(:, 41));
dataset.VarName42 = cell2mat(raw(:, 42));
dataset.VarName43 = cell2mat(raw(:, 43));
dataset.VarName44 = cell2mat(raw(:, 44));
dataset.VarName45 = cell2mat(raw(:, 45));
dataset.VarName46 = cell2mat(raw(:, 46));
dataset.VarName47 = cell2mat(raw(:, 47));
dataset.VarName48 = cell2mat(raw(:, 48));
dataset.VarName49 = cell2mat(raw(:, 49));
dataset.VarName50 = cell2mat(raw(:, 50));
dataset.VarName51 = cell2mat(raw(:, 51));
dataset.VarName52 = cell2mat(raw(:, 52));
dataset.VarName53 = cell2mat(raw(:, 53));
dataset.VarName54 = cell2mat(raw(:, 54));
dataset.VarName55 = cell2mat(raw(:, 55));
dataset.VarName56 = cell2mat(raw(:, 56));
dataset.VarName57 = cell2mat(raw(:, 57));
dataset.VarName58 = cell2mat(raw(:, 58));

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp R;